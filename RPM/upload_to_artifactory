def server = Artifactory.server 'art1'	// Artifactory server instance declaration. 'server1' is the Server ID given to Artifactory server in Jenkins
def buildInfo = null 								// variable to store build info which is used by Artifactory
def rtMaven = Artifactory.newMavenBuild()	// creating an Artifactory Maven Build instance
def Reason = "JOB FAILED"					// variable to display the build failure reason

node {
	stage ('Checkout') {
		checkout scm
		//checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'RelativeTargetDirectory']], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'c0c5e22f-9121-4734-922d-d8bfb1c4e339', url: 'https://padlgithubggk1.sw.fortna.net/FortnaWES/wes-cartpicking-rpm.git']]])
	}	//Checkout SCM stage ends
	
	def content = readFile './env'				// variable to store env file contents
	Properties env_properties = new Properties()	// creating an object for Properties class
	InputStream contents = new ByteArrayInputStream(content.getBytes());	// storing the contents
	env_properties.load(contents)	
	contents = null
	
	stage ('Maven Build') {
		rtMaven.deployer server: server, snapshotRepo: env_properties.snapshot_repo, releaseRepo: env_properties.release_repo			//Deploying artifacts to this repo //
		rtMaven.deployer.deployArtifacts = false		//this will not publish artifacts soon after build succeeds	//
		rtMaven.tool = 'maven'							//Defining maven tool //
		// Maven build starts here //
		def mvn_version = tool 'maven'
		withEnv( ["PATH+MAVEN=${mvn_version}/bin"]  ) {			
			buildInfo = rtMaven.run pom: 'pom.xml', goals: 'clean install -Dmaven.test.skip=true'
		}
	} //maven stage ends
	
	stage ('Artifacts Deployment'){		
		rtMaven.deployer.deployArtifacts buildInfo
		server.publishBuildInfo buildInfo
	} //artifact stage ends
} //node ends
